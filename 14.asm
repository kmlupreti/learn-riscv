; this risc-v assembly was generated by gcc by compiling following c program:
; #include <stddef.h>
; void swap(int A[], size_t k) {
;   int temp = A[k];
;   A[k] = A[k + 1];
;   A[k + 1] = temp;
; }
; I have removed the unnecessary sections and added comments to understand the program
swap:
	addi	sp,sp,-48  ; adjust stack pointer to hold 48 bytes i.e 12 words
	sw	ra,44(sp)  ; save return address
	sw	s0,40(sp)  ; save frame pointer
	addi	s0,sp,48   ; s0 = original stack pointer address
	sw	a0,-36(s0) ; store base addr of array A in stack
	sw	a1,-40(s0) ; store word index k in stack
	lw	a5,-40(s0) ; a5 = k
	slli	a5,a5,2    ; a5 = a5 * 4 (index to kth element of A)
	lw	a4,-36(s0) ; a4 = base addr of A
	add	a5,a4,a5   ; a5 = addr of kth element of A
	lw	a5,0(a5)   ; a5 = value at kth element of A
	sw	a5,-20(s0) ; store a5 i.e kth element in stack
	lw	a5,-40(s0) ; a5 = k
	addi	a5,a5,1    ; a5 = k + 1
	slli	a5,a5,2    ; a5 = a5 * 4 (index to (k+1)th element of A)
	lw	a4,-36(s0) ; a4 = base addr of A
	add	a4,a4,a5   ; a4 = addr of (k+1)th element of A
	lw	a5,-40(s0) ; a5 = k 
	slli	a5,a5,2    ; a5 = a5 * 4 (index to kth element of A)
	lw	a3,-36(s0) ; a3 = base addr of A
	add	a5,a3,a5   ; a5 = addr of kth element of A
	lw	a4,0(a4)   ; a4 = value at (k+1)th element of A 
	sw	a4,0(a5)   ; store value of a4 i.e (k+1)th element in location of kth element pointed by a5
	lw	a5,-40(s0) ; a5 = k
	addi	a5,a5,1    ; a5 = k + 1
	slli	a5,a5,2    ; a5 = a5 * 4 (index to (k+1)th element of A)
	lw	a4,-36(s0) ; a4 = base addr of A
	add	a5,a4,a5   ; a5 = addr of (k+1)th element of A
	lw	a4,-20(s0) ; a4 = stored value of a5 i.e kth element 
	sw	a4,0(a5)   ; store the value of a4 i.e kth element in location of (k+1)th element pointed by a5  
	nop
	lw	ra,44(sp)  ; restore return address
	lw	s0,40(sp)  ; restore frame pointer
	addi	sp,sp,48   ; restore stack pointer size
	jr	ra         ; return to caller
